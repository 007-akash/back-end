package com.wipro.flightms.service.impl;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.LocalTime;
import java.util.List;

import org.springframework.stereotype.Service;

import com.wipro.flightms.entity.Flights;
import com.wipro.flightms.exception.ResourceNotFoundException;
import com.wipro.flightms.exception.ValidationException;
import com.wipro.flightms.model.FlightFilterRequest;
import com.wipro.flightms.repository.FlightRepository;
import com.wipro.flightms.service.FlightService;

@Service
public class FlightServiceImpl implements FlightService{
	
	private final FlightRepository flightRepository;
	
	public FlightServiceImpl(FlightRepository flightRepository) {
		this.flightRepository = flightRepository;
	}

	@Override
	public List<Flights> getFlights(Long source, Long destination, LocalDate date) {
		return flightRepository.findBySourceIdAndDestinationIdAndTravelDate(source, destination, date);
	}

	@Override
	public Flights getFlight(Long id) {
		return flightRepository.findById(id).orElseThrow(() -> new ResourceNotFoundException("Flight not found"));
	}

	@Override
	public List<Flights> filterFlights(FlightFilterRequest flightFliterRequest) {
		validateFilter(flightFliterRequest);
		LocalTime morningStartTime = flightFliterRequest.isMorningDeparture() ? LocalTime.of(5, 0) : LocalTime.of(0, 5) ;
        LocalTime eveningEndTime = flightFliterRequest.isEveningDeparture() ? LocalTime.of(22, 0) : LocalTime.of(23, 55) ;
        if(flightFliterRequest.isMorningDeparture()) {
        	eveningEndTime = LocalTime.of(14, 0);
        }
        if(flightFliterRequest.isEveningDeparture()) {
        	morningStartTime = LocalTime.of(14, 0);
        }
        LocalDate travelDate = flightFliterRequest.getTravelDate();
        BigDecimal minPrice = flightFliterRequest.getStartPrice() != null ? flightFliterRequest.getStartPrice() : BigDecimal.ZERO;
        BigDecimal maxPrice = flightFliterRequest.getMaxPrice() != null ? flightFliterRequest.getMaxPrice() : BigDecimal.valueOf(Double.MAX_VALUE);

        return flightRepository.findByStopOverAndAircraftNameAndPriceBetweenAndDepartureTimeBetweenAndTravelDate(
                flightFliterRequest.getStopOver(), 
                flightFliterRequest.getFlightName(), 
                minPrice,             
                maxPrice,
                morningStartTime, 
                eveningEndTime,
                travelDate
        );
	}

	private void validateFilter(FlightFilterRequest flightFliterRequest) {
		boolean isMorningDeparture = flightFliterRequest.isMorningDeparture();
		boolean isEveningDeparture = flightFliterRequest.isEveningDeparture();
		if(isMorningDeparture && isEveningDeparture)
			throw new ValidationException("Bad Filter Request");
	}

}
