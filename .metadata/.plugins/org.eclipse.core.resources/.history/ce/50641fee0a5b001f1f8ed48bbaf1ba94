package com.wipro.flightms.service.impl;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.LocalTime;
import java.util.ArrayList;
import java.util.List;

import org.springframework.stereotype.Service;

import com.wipro.flightms.entity.Flights;
import com.wipro.flightms.exception.ResourceNotFoundException;
import com.wipro.flightms.exception.ValidationException;
import com.wipro.flightms.model.FlightFilterRequest;
import com.wipro.flightms.repository.FlightRepository;
import com.wipro.flightms.service.FlightService;

import jakarta.persistence.EntityManager;
import jakarta.persistence.PersistenceContext;
import jakarta.persistence.criteria.CriteriaBuilder;
import jakarta.persistence.criteria.CriteriaQuery;
import jakarta.persistence.criteria.Predicate;
import jakarta.persistence.criteria.Root;

@Service
public class FlightServiceImpl implements FlightService{
	
	private final FlightRepository flightRepository;
	
	@PersistenceContext
	private EntityManager entityManager;
	
	public FlightServiceImpl(FlightRepository flightRepository) {
		this.flightRepository = flightRepository;
	}

	@Override
	public List<Flights> getFlights(Long source, Long destination, LocalDate date) {
		return flightRepository.findBySourceIdAndDestinationIdAndTravelDate(source, destination, date);
	}

	@Override
	public Flights getFlight(Long id) {
		return flightRepository.findById(id).orElseThrow(() -> new ResourceNotFoundException("Flight not found"));
	}

	@Override
	public List<Flights> filterFlights(FlightFilterRequest flightFilterRequest) {
	    validateFilter(flightFilterRequest);

	    // Create an instance of CriteriaBuilder
	    CriteriaBuilder cb = entityManager.getCriteriaBuilder();
	    CriteriaQuery<Flights> cq = cb.createQuery(Flights.class);
	    Root<Flights> flight = cq.from(Flights.class);

	    // List to hold predicates
	    List<Predicate> predicates = new ArrayList<>();

	    // Add predicates conditionally based on non-null values
	    if (flightFilterRequest.getStopOver() != null) {
	        predicates.add(cb.equal(flight.get("stopOver"), flightFilterRequest.getStopOver()));
	    }

	    if (flightFilterRequest.getFlightName() != null) {
	        predicates.add(cb.equal(flight.get("aircraftName"), flightFilterRequest.getFlightName()));
	    }

	    if (flightFilterRequest.getStartPrice() != null || flightFilterRequest.getMaxPrice() != null) {
	        BigDecimal minPrice = flightFilterRequest.getStartPrice() != null ? flightFilterRequest.getStartPrice() : BigDecimal.ZERO;
	        BigDecimal maxPrice = flightFilterRequest.getMaxPrice() != null ? flightFilterRequest.getMaxPrice() : BigDecimal.valueOf(Double.MAX_VALUE);
	        predicates.add(cb.between(flight.get("price"), minPrice, maxPrice));
	    }

	    if (flightFilterRequest.isMorningDeparture() || flightFilterRequest.isEveningDeparture()) {
	        LocalTime morningStartTime = flightFilterRequest.isMorningDeparture() ? LocalTime.of(5, 0) : LocalTime.of(0, 5);
	        LocalTime eveningEndTime = flightFilterRequest.isEveningDeparture() ? LocalTime.of(22, 0) : LocalTime.of(23, 55);

	        if (flightFilterRequest.isMorningDeparture()) {
	            eveningEndTime = LocalTime.of(14, 0);
	        }
	        if (flightFilterRequest.isEveningDeparture()) {
	            morningStartTime = LocalTime.of(14, 0);
	        }
	        predicates.add(cb.between(flight.get("departureTime"), morningStartTime, eveningEndTime));
	    }

	    if (flightFilterRequest.getTravelDate() != null) {
	        predicates.add(cb.equal(flight.get("travelDate"), flightFilterRequest.getTravelDate()));
	    }

	    // Add the predicates to the query
	    cq.where(predicates.toArray(new Predicate[0]));

	    // Execute the query
	    return entityManager.createQuery(cq).getResultList();
	}

	private void validateFilter(FlightFilterRequest flightFliterRequest) {
		boolean isMorningDeparture = flightFliterRequest.isMorningDeparture();
		boolean isEveningDeparture = flightFliterRequest.isEveningDeparture();
		if(isMorningDeparture && isEveningDeparture)
			throw new ValidationException("Bad Filter Request");
	}

}
